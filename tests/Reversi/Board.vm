function Board.new 3
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 9
pop static 0
push constant 8
pop static 0
push constant 30
pop static 1
push constant 8
pop static 2
push constant 8
pop static 3
push constant 10
pop static 4
push constant 3
pop static 7
push constant 2
pop static 7
push constant 0
pop this 1
push constant 0
pop this 2
push static 0
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push static 0
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
label WHILE_EXP1
push local 1
push static 0
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
push static 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Board.setCell 1
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 2
push local 0
add
pop pointer 1
push that 0
push static 6
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
call Screen.setColor 1
pop temp 0
push static 2
push argument 2
push static 1
call Math.multiply 2
add
push static 1
push constant 2
call Math.divide 2
add
push static 3
push argument 1
push static 1
call Math.multiply 2
add
push static 1
push constant 2
call Math.divide 2
add
push static 4
call Screen.drawCircle 3
pop temp 0
label IF_FALSE0
push argument 3
push static 5
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
call Screen.setColor 1
pop temp 0
push static 2
push argument 2
push static 1
call Math.multiply 2
add
push static 1
push constant 2
call Math.divide 2
add
push static 3
push argument 1
push static 1
call Math.multiply 2
add
push static 1
push constant 2
call Math.divide 2
add
push static 4
push constant 1
sub
call Screen.drawCircle 3
pop temp 0
label IF_FALSE1
push argument 2
push local 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Board.initGrid 4
push argument 0
pop pointer 0
push static 0
push static 1
call Math.multiply 2
pop local 1
push static 0
push constant 1
add
pop local 2
push static 0
push constant 2
call Math.divide 2
pop local 3
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push local 2
lt
not
if-goto WHILE_END0
push static 2
push static 3
push local 0
push static 1
call Math.multiply 2
add
push static 2
push local 1
add
push static 3
push local 0
push static 1
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push static 2
push local 0
push static 1
call Math.multiply 2
add
push static 3
push static 2
push local 0
push static 1
call Math.multiply 2
add
push static 3
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push local 3
push constant 1
sub
push local 3
push constant 1
sub
push static 5
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push constant 1
sub
push local 3
push static 6
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push local 3
push constant 1
sub
push static 6
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push local 3
push static 5
call Board.setCell 4
pop temp 0
push pointer 0
push constant 0
not
call Board.drawSelected 2
pop temp 0
push constant 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push static 0
push static 1
call Math.multiply 2
pop local 1
push static 0
push constant 1
add
pop local 2
push static 0
push constant 2
call Math.divide 2
pop local 3
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push local 2
lt
not
if-goto WHILE_END1
push static 2
push static 3
push local 0
push static 1
call Math.multiply 2
add
push static 2
push local 1
add
push static 3
push local 0
push static 1
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push static 2
push local 0
push static 1
call Math.multiply 2
add
push static 3
push static 2
push local 0
push static 1
call Math.multiply 2
add
push static 3
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push pointer 0
push local 3
push constant 1
sub
push local 3
push constant 1
sub
push static 5
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push constant 1
sub
push local 3
push static 6
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push local 3
push constant 1
sub
push static 6
call Board.setCell 4
pop temp 0
push pointer 0
push local 3
push local 3
push static 5
call Board.setCell 4
pop temp 0
push pointer 0
push constant 0
not
call Board.drawSelected 2
pop temp 0
label IF_FALSE0
push constant 0
return
function Board.getSelectedRow 0
push argument 0
pop pointer 0
push this 1
return
function Board.getSelectedCol 0
push argument 0
pop pointer 0
push this 2
return
function Board.isEmpty 1
push argument 0
pop pointer 0
push argument 2
push local 0
add
pop pointer 1
push that 0
push static 7
eq
return
function Board.setConsts 0
push argument 0
pop pointer 0
push argument 1
pop static 5
push argument 2
pop static 6
push argument 3
pop static 8
push argument 4
pop static 9
push argument 5
pop static 11
push argument 6
pop static 10
push constant 0
return
function Board.reverseDir 7
push argument 0
pop pointer 0
push constant 0
pop local 0
push argument 1
pop local 1
push argument 2
pop local 2
push constant 0
not
pop local 5
label WHILE_EXP0
push local 5
not
if-goto WHILE_END0
push local 1
push argument 6
add
pop local 1
push local 2
push argument 5
add
pop local 2
push local 1
push constant 0
lt
push local 1
push static 0
push constant 1
sub
gt
or
push local 2
push constant 0
lt
or
push local 2
push static 0
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 5
push constant 0
pop local 0
goto IF_END0
label IF_FALSE0
push local 1
push this 0
add
pop pointer 1
push that 0
pop local 6
push local 2
push local 6
add
pop pointer 1
push that 0
push static 7
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 5
push constant 0
pop local 0
goto IF_END1
label IF_FALSE1
push local 2
push local 6
add
pop pointer 1
push that 0
push argument 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 5
push local 1
pop local 3
push local 2
pop local 4
goto IF_END2
label IF_FALSE2
push local 0
push constant 1
add
pop local 0
label IF_END2
label IF_END1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push argument 4
push local 0
push constant 0
gt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
push argument 6
add
pop local 1
push argument 2
push argument 5
add
pop local 2
label WHILE_EXP1
push local 1
push local 3
eq
push local 2
push local 4
eq
and
not
not
if-goto WHILE_END1
push constant 150
call Sys.wait 1
pop temp 0
push pointer 0
push local 1
push local 2
push argument 3
call Board.setCell 4
pop temp 0
push local 1
push argument 6
add
pop local 1
push local 2
push argument 5
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE3
push local 0
return
function Board.reverse 2
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 1
push argument 2
push local 1
add
pop pointer 1
push that 0
push static 7
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 0
push constant 1
neg
call Board.reverseDir 7
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 1
neg
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 0
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 0
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 0
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 1
neg
call Board.reverseDir 7
add
pop local 0
push constant 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 0
push constant 1
neg
call Board.reverseDir 7
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 1
neg
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 0
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 0
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 1
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 0
call Board.reverseDir 7
add
pop local 0
push local 0
push pointer 0
push argument 1
push argument 2
push argument 3
push argument 4
push constant 1
neg
push constant 1
neg
call Board.reverseDir 7
add
pop local 0
label IF_FALSE1
push argument 4
push local 0
push constant 0
gt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push argument 1
push argument 2
push argument 3
call Board.setCell 4
pop temp 0
label IF_FALSE2
goto IF_END0
label IF_FALSE0
push constant 0
pop local 0
label IF_END0
push local 0
return
function Board.isGameOver 4
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
not
pop local 3
label WHILE_EXP0
push local 3
push local 0
push static 0
lt
and
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 3
push local 1
push static 0
lt
and
not
if-goto WHILE_END1
push pointer 0
push local 0
push local 1
push argument 1
push constant 0
call Board.reverse 5
pop local 2
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 3
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 3
return
function Board.getWinner 6
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push static 7
pop local 4
label WHILE_EXP0
push local 2
push static 0
lt
not
if-goto WHILE_END0
push constant 0
pop local 3
push local 2
push this 0
add
pop pointer 1
push that 0
pop local 5
label WHILE_EXP1
push local 3
push static 0
lt
not
if-goto WHILE_END1
push local 3
push local 5
add
pop pointer 1
push that 0
push static 5
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
goto IF_END0
label IF_FALSE0
push local 3
push local 5
add
pop pointer 1
push that 0
push static 6
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 1
add
pop local 1
label IF_FALSE1
label IF_END0
push local 3
push constant 1
add
push constant 7
sub
push constant 7
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
push local 1
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push static 5
pop local 4
goto IF_END2
label IF_FALSE2
push local 0
push local 1
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push static 6
pop local 4
label IF_FALSE3
label IF_END2
push local 4
return
function Board.drawSelected 3
push argument 0
pop pointer 0
push static 2
push this 2
push static 1
call Math.multiply 2
add
push constant 2
add
pop local 0
push static 3
push this 1
push static 1
call Math.multiply 2
add
push constant 2
add
pop local 1
push static 1
push constant 4
sub
pop local 2
push argument 1
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 0
push local 1
push local 2
add
push constant 5
sub
push constant 5
add
call Screen.drawLine 4
pop temp 0
push local 0
push local 1
push local 0
push local 2
add
push local 1
call Screen.drawLine 4
pop temp 0
push local 0
push local 2
add
push local 1
push local 0
push local 2
add
push local 1
push local 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push local 1
push local 2
add
push local 0
push local 2
add
push local 1
push local 2
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Board.moveSelected 0
push argument 0
pop pointer 0
push pointer 0
push constant 0
call Board.drawSelected 2
pop temp 0
push argument 1
push static 8
eq
push this 1
push constant 0
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push constant 1
sub
pop this 1
label IF_FALSE0
push argument 1
push static 9
eq
push this 1
push static 0
push constant 1
sub
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 1
push constant 1
add
pop this 1
label IF_FALSE1
push argument 1
push static 10
eq
push this 2
push constant 0
gt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 2
push constant 1
sub
pop this 2
label IF_FALSE2
push argument 1
push static 11
eq
push this 2
push static 0
push constant 1
sub
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 2
push constant 1
add
pop this 2
label IF_FALSE3
push pointer 0
push constant 0
not
call Board.drawSelected 2
pop temp 0
push constant 0
return
function Board.computerMove 6
push argument 0
pop pointer 0
push constant 0
pop local 5
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push static 0
lt
not
if-goto WHILE_END1
push pointer 0
push local 0
push local 1
push static 6
push constant 0
call Board.reverse 5
pop local 2
push local 2
push local 5
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
pop local 5
push local 0
pop local 3
push local 1
pop local 4
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push local 3
push local 4
push static 6
push constant 0
not
call Board.reverse 5
pop temp 0
push constant 0
return
function Board.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Array.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 0
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.drwCl 2
push argument 0
pop pointer 0
push argument 1
push constant 1
neg
gt
push argument 1
push constant 32
lt
and
push argument 2
push constant 1
neg
gt
and
push argument 2
push constant 16
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push argument 2
push constant 15
call Math.multiply 2
push argument 1
push constant 16
call Math.multiply 2
push constant 15
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push constant 16
call Math.multiply 2
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 1
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 3
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 4
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 5
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 6
add
push argument 2
push constant 15
call Math.multiply 2
push constant 3
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 7
add
push argument 2
push constant 15
call Math.multiply 2
push constant 2
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 8
add
push argument 2
push constant 15
call Math.multiply 2
push constant 2
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 9
add
push argument 2
push constant 15
call Math.multiply 2
push constant 3
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 10
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 11
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 12
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
label IF_FALSE1
push local 0
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 16
call Math.multiply 2
push constant 4
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
push argument 1
push constant 16
call Math.multiply 2
push constant 12
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE2
push local 0
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
push constant 16
call Math.multiply 2
push constant 6
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 5
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 4
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 3
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 3
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 4
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 5
add
push argument 2
push constant 15
call Math.multiply 2
push constant 3
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 6
add
push argument 2
push constant 15
call Math.multiply 2
push constant 3
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 7
add
push argument 2
push constant 15
call Math.multiply 2
push constant 3
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 8
add
push argument 2
push constant 15
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 9
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 10
add
push argument 2
push constant 15
call Math.multiply 2
push constant 6
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 9
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 8
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 7
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
push argument 1
push constant 16
call Math.multiply 2
push constant 7
add
push argument 2
push constant 15
call Math.multiply 2
push constant 5
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE3
push local 0
push constant 4
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 14
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
push argument 1
push constant 16
call Math.multiply 2
push constant 14
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
push argument 1
push constant 16
call Math.multiply 2
push constant 14
add
push argument 2
push constant 15
call Math.multiply 2
push constant 14
add
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
push argument 1
push constant 16
call Math.multiply 2
push constant 14
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 2
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
push argument 1
push constant 16
call Math.multiply 2
push constant 7
add
push argument 2
push constant 15
call Math.multiply 2
push constant 2
add
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 16
call Math.multiply 2
push constant 14
add
push argument 2
push constant 15
call Math.multiply 2
push constant 7
add
push argument 1
push constant 16
call Math.multiply 2
push constant 8
add
push argument 2
push constant 15
call Math.multiply 2
push constant 2
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE4
label IF_FALSE0
push constant 0
return
function Board.drawSn 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 1
push constant 32
lt
not
if-goto WHILE_END0
label WHILE_EXP1
push local 2
push constant 16
lt
not
if-goto WHILE_END1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
